<Locationmatch "/wp-login.php">


# create new user collection based on the POSTed "log" parameter
SecAction "id:1000001,phase:2,pass,initcol:USER=%{ARGS.log},nolog"


# if login is for post_pass and ther username is blank, then it's a password protected post, and we'll let our guard down to keep pages from being DOSed
SecRule ARGS:post_password ".*" "id:1000006,phase:2,allow,\
				log,msg:'postpass login whitelisted',\
				chain"
	SecRule ARGS:action "postpass" "chain"
	SecRule REQUEST_METHOD "POST" 



# if bf_block flag is set for this username, redirect to abuse page, only for POST requests
SecRule USER:bf_block "@gt 0" "id:1000002,phase:2,deny,\
				redirect:https://%{SERVER_NAME}/brute,\
				log,msg:'Username: %{ARGS.log} blocked because of suspected brute force attack',\
				chain"
	SecRule REQUEST_METHOD "POST"



# if the response is 302, the auth was successful and we reset the counter
SecRule RESPONSE_STATUS "^302" "id:1000003,phase:5,nolog,pass,\
				setvar:user.bf_counter=0,\
				chain"
	SecRule REQUEST_METHOD "POST"

# if the response is 200, the auth was unsucessful, so we increment the user-based counter
SecRule RESPONSE_STATUS "^200" "id:1000004,phase:5,pass,\
				log,msg:'unsuccessful login for user; %{ARGS.log}... incrementing brute force counter  ',\
				setvar:user.bf_counter=+1,\
				deprecatevar:ip.bf_counter=1/600,\
				chain"
	SecRule REQUEST_METHOD "POST" 

# if the user-based counter is greater than 10, set the block flag with expiry of 30 minutes.
SecRule user:bf_counter "@gt 10" "id:1000005,\
				setvar:user.bf_block=1,\
				expirevar:user.bf_block=1800,\
				setvar:user.bf_counter=0,\
				chain"
	SecRule REQUEST_METHOD "POST"

</Locationmatch>
